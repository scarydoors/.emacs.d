#+TITLE: scarydoors' Emacs Configuration
#+PROPERTY: header-args :tangle yes
* Package Management
** =use-package=
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  (setq use-package-always-defer t)
  (setq use-package-always-ensure t)
#+end_src
* Org
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t
        org-startup-indented t
        org-src-tab-acts-natively t
        org-pretty-entities t
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t)
#+end_src
** Org Superstar
#+begin_src emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode))
#+end_src
** Mixed Pitches in Org Mode
#+begin_src emacs-lisp
  (use-package mixed-pitch
    :hook (org-mode . mixed-pitch-mode)
    :config
    (setq mixed-pitch-fixed-pitch-faces
          '(org-block org-block-begin-line org-block-end-line org-code org-document-info-keyword org-meta-line org-table org-verbatim)))

#+end_src
* General Configuration
** Better Defaults
#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :hook ((prog-mode . display-line-numbers-mode)
           (prog-mode . display-fill-column-indicator-mode))
    :init
    (setq inhibit-startup-screen t
          initial-scratch-message nil
          ring-bell-function 'ignore
          sentence-end-double-space nil
          use-dialog-box nil
          use-short-answers t)

    (setq load-prefer-newer t)

    ;; split vertically by default 
    (setq split-width-threshold 100
          split-height-threshold nil)

    (setq user-full-name "Alan Strauhs"
          user-mail-address "scarydoorsyeah@gmail.com")

    ;; default to utf-8
    (set-charset-priority 'unicode)
    (setq locale-coding-system 'utf-8
          coding-system-for-read 'utf-8
          coding-system-for-write 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

    (setq require-final-newline nil)

    (delete-selection-mode +1)

    (recentf-mode +1)

    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

    (setq make-backup-files nil
          auto-save-default nil
          create-lockfiles nil)

    (setq vc-follow-symlinks t)

    (winner-mode +1)

    (setq-default indent-tabs-mode nil)
    (setq-default truncate-lines 1)

    (setq-default fill-column 80)

    ;; better scrolling
    (setq scroll-preserve-screen-position 1
          scroll-step 1
          scroll-margin 4
          scroll-conservatively 10000)

    ;; setup line numbers
    (setq-default display-line-numbers-width 4)

    (column-number-mode +1))

#+end_src
** System
*** Ensure Emacs path variable is same as shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :demand t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src
*** Garbage Collector Hack
#+begin_src emacs-lisp
  (use-package gcmh
    :demand t
    :config
    (gcmh-mode +1))
#+end_src
** User Interface
*** Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :demand t
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t
          doom-themes-treemacs-theme "doom-colors")
    (load-theme 'doom-tomorrow-night t)
    (doom-themes-org-config)
    (doom-themes-treemacs-config))
#+end_src
*** Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :family "Hack"
                      :height 160)
  (set-face-attribute 'variable-pitch nil
                      :family "Source Sans Pro"
                      :weight 'normal
                      :height 160)
  (set-face-attribute 'mode-line nil :inherit 'variable-pitch)
  (set-face-attribute 'mode-line-inactive nil :inherit 'variable-pitch)
#+end_src
*** Modeline
**** Indicators
#+begin_src emacs-lisp
  (display-battery-mode +1)
  (display-time-mode +1)
#+end_src
**** =doom-modeline=
#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-height 40
          doom-modeline-mu4e t
          doom-modeline-time-icon nil
          doom-modeline-window-width-limit nil
          all-the-icons-scale-factor 1.1))
#+end_src
**** =anzu=
#+begin_src emacs-lisp
  (use-package anzu
    :defer 0.1
    :config
    (global-anzu-mode +1))
#+end_src
*** =which-key=
#+begin_src emacs-lisp
  (use-package which-key
    :defer 0.1
    :config
    (which-key-mode +1))
#+end_src
*** =solaire-mode=
#+begin_src emacs-lisp
  (use-package solaire-mode
    :hook (after-init . solaire-global-mode))
#+end_src
*** =all-the-icons=
#+begin_src emacs-lisp
  (use-package all-the-icons
    :demand
    :if (display-graphic-p))
#+end_src
*** =ace-window=
#+begin_src emacs-lisp
  (use-package ace-window
    :defer 0.1
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src
*** Indent Guides
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'bitmap))
#+end_src
*** =treemacs=
#+begin_src emacs-lisp
  (use-package treemacs
    :bind (:map global-map
                ("M-0" . treemacs-select-window)
                ("C-x t 1" . treemacs-delete-other-windows)
                ("C-x t t" . treemacs)
                ("C-x t d" . treemacs-select-directory)
                ("C-x t B" . treemacs-bookmark)
                ("C-x t C-t" . treemacs-find-file)
                ("C-x t M-t" . treemacs-find-tag))
    :config
    (treemacs-follow-mode +1)
    (treemacs-filewatch-mode +1)
    (treemacs-fringe-indicator-mode 'always))
#+end_src
** Register
#+begin_src emacs-lisp
  (set-register ?C '(file . "~/.emacs.d/config.org"))
#+end_src
** Dirvish
#+begin_src emacs-lisp
  (use-package dirvish
    :defer 0.1
    :config
    (dirvish-override-dired-mode +1))
#+end_src
** =magit=
#+begin_src emacs-lisp
  (use-package magit
    :defer 0.1)
#+end_src
*** Magit Forges
#+begin_src emacs-lisp
  (use-package forge
    :after magit)
#+end_src
** Project Management
#+begin_src emacs-lisp
  (use-package projectile
    :demand t
    :init (projectile-mode +1)
    :bind
    (:map projectile-mode-map
          ("C-c p" . projectile-command-map)))
#+end_src
*** Consult Integration
#+begin_src emacs-lisp
  (use-package consult-projectile
    :demand t
    :bind ("C-<tab>" . consult-projectile))
#+end_src
** Completion Frameworks
*** Selectrum
#+begin_src emacs-lisp
  (use-package selectrum
    :demand t
    :config
    (selectrum-mode +1))
#+end_src
**** Prescient
#+begin_src emacs-lisp
  (use-package prescient
    :demand t
    :config (prescient-persist-mode +1))

  (use-package selectrum-prescient
    :init (selectrum-prescient-mode +1)
    :after selectrum)
#+end_src
*** Consult
#+begin_src emacs-lisp
  (use-package consult
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                  ;; orig. next-matching-history-element
           ("M-r" . consult-history))                 ;; orig. previous-matching-history-element
    :config
    (setq register-preview-delay 0)
    (setq consult-narrow-key "@"))
#+end_src
*** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :demand t
    :config
    (marginalia-mode +1)
    :bind (:map minibuffer-local-completion-map
                ("M-A" . marginalia-cycle)
                ("C-i" . marginalia-cycle-annotators)))
#+end_src
*** Embark
#+begin_src emacs-lisp
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
*** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :demand t
    :init
    (setq corfu-auto t
          corfu-auto-delay 0
          corfu-auto-prefix 1
          corfu-quit-no-match 'separator)
    (setq tab-always-indent 'complete)

    (add-hook 'eshell-mode-hook
              (lambda ()
                (setq-local corfu-auto nil)))
    :config
    (global-corfu-mode))

  (use-package cape
    :demand t
    :after corfu
    :init
    (add-to-list 'completion-at-point-functions #'cape-file))

  (use-package corfu-doc
    :hook (corfu-mode . corfu-doc-mode)
    :bind
    (
     :map corfu-map
     ("M-p" . corfu-doc-scroll-down)
     ("M-n" . corfu-doc-scroll-up)
     ("M-d" . corfu-doc-toggle)
     ))

  (use-package kind-icon
    :demand t
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
** Email
#+begin_src emacs-lisp
  (use-package mu4e
    :straight nil
    :defer 0.2
    :load-path "/usr/local/share/emacs/site-lisp/mu/mu4e/"
    :init
    (require 'smtpmail)
    (setq mu4e-mu-binary (executable-find "mu")
          mu4e-maildir "~/.maildir"
          mu4e-get-mail-command (concat (executable-find "mbsync") " -a")
          mu4e-update-interval 300
          mu4e-attachment-dir "~/Desktop"
          mu4e-change-filenames-when-moving t
          mu4e-user-mail-address-list '("alan.strauhs@wearesauce.io")))

  (use-package mu4e-alert
    :hook (after-init . (mu4e-alert-enable-mode-line-display mu4e-alert-enable-notifications))
    :after mu4e
    :init
    (defun perso--mu4e-notif ()
      "Display both mode line and desktop alerts for incoming new emails."
      (interactive)
      (mu4e-update-mail-and-index 1)        ; getting new emails is ran in the background
      (mu4e-alert-enable-mode-line-display) ; display new emails in mode-line
      (mu4e-alert-enable-notifications))    ; enable desktop notifications for new emails
    (defun perso--mu4e-refresh ()
      "Refresh emails every 300 seconds and display desktop alerts."
      (interactive)
      (mu4e t)                            ; start silently mu4e mandatory for mu>=1.3.8
      (run-with-timer 0 300 'perso--mu4e-notif))
    :bind ("<f2>" . perso--mu4e-refresh)
    :config
    (mu4e-alert-set-default-style 'notifier)
    (setq mu4e-alert-interesting-mail-query "flag:unread AND NOT flag:trashed"))


#+end_src
* Editing Packages
** =expand-region=
#+begin_src emacs-lisp
  (use-package expand-region
    :defer 0.1
    :bind ("C-=" . er/expand-region))
#+end_src
** =smartparens=
#+begin_src emacs-lisp
  (use-package smartparens
    :defer 0.1
    :bind ("M-n" . sp-forward-sexp)
    :config
    (require 'smartparens-config)

    (defun indent-between-pair (&rest _ignored)
      (newline)
      (indent-according-to-mode)
      (forward-line -1)
      (indent-according-to-mode))

    (sp-local-pair 'prog-mode "{" nil :post-handlers '((indent-between-pair "RET")))
    (sp-local-pair 'prog-mode "[" nil :post-handlers '((indent-between-pair "RET")))
    (sp-local-pair 'prog-mode "(" nil :post-handlers '((indent-between-pair "RET")))

    (smartparens-global-mode +1))
#+end_src
** =avy=
#+begin_src emacs-lisp
  (use-package avy
    :config
    (avy-setup-default)
    (global-set-key (kbd "C-c C-j") 'avy-resume)
    :bind
    (("M-g w" . avy-goto-word-1)
     ("M-g g" . avy-goto-line)
     ("M-g c" . avy-goto-char-2)
     ("C-c C-'" . avy-pop-mark)))
#+end_src
** =hungry-delete=
#+begin_src emacs-lisp
  (use-package hungry-delete
    :init
    (setq hungry-delete-join-reluctantly t)
    :bind ("M-DEL" . global-hungry-delete-mode))
#+end_src
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :defer 0.1
    :config
    (yas-global-mode +1))
#+end_src
* Programming
** LSP Configuration
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq read-process-output-max (* 1024 1024))
    (setq lsp-keymap-prefix "C-c l"
          lsp-idle-delay 0.1)
    (setq-default lsp-lens-enable nil)
    (setq lsp-completion-provider :none)
    :hook (((c++-mode c-mode rust-mode js-mode web-mode css-mode) . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration))
    :config
    (add-to-list 'lsp-language-id-configuration
                 '(web-mode . "html"))
    ;; (lsp-register-client
    ;;  (make-lsp-client :new-connection (lsp-stdio-connection '("ember-language-server" "--stdio"))
    ;;                   :activation-fn (lsp-activate-on "html")
    ;;                   :server-id 'ember-ls
    ;;                   :priority -4
    ;;                   :add-on? t))

    (unbind-key "M-n" lsp-signature-mode-map)
    :commands lsp lsp-deferred)
#+end_src
*** 
** JSON
#+begin_src emacs-lisp
  (use-package json-mode)
#+end_src
** Rust
#+begin_src emacs-lisp
  (use-package rustic)
#+end_src
** Meson
#+begin_src emacs-lisp
  (use-package meson-mode)
#+end_src
** Javascript
*** =rjsx-mode=
#+begin_src emacs-lisp
  (use-package rjsx-mode
    :mode ("\\.js\\'"
           "\\.jsx\\'")
    :config
    (setq js2-mode-show-parse-errors nil
          js2-mode-show-strict-warnings nil
          js2-basic-offset 2
          js-indent-level 2))
#+end_src
*** Ensure node modules path is added to exec-path
#+begin_src emacs-lisp
  (use-package add-node-modules-path
    :hook (((js2-mode rjsx-mode) . add-node-modules-path)))
#+end_src
** Web
#+begin_src emacs-lisp
  (use-package web-mode
    :mode
    (("\\.phtml\\'" . web-mode)
     ("\\.tpl\\.php\\'" . web-mode)      
     ("\\.jsp\\'" . web-mode)            
     ("\\.as[cp]x\\'" . web-mode)        
     ("\\.erb\\'" . web-mode)            
     ("\\.mustache\\'" . web-mode)       
     ("\\.djhtml\\'" . web-mode)         
     ("\\.jst.ejs\\'" . web-mode)        
     ("\\.html?\\'" . web-mode)
     ("\\.hbs\\'" . web-mode))

    :init
    (setq web-mode-enable-block-face t)
    (setq web-mode-enable-comment-keywords t)
    (setq web-mode-enable-current-element-highlight t)
    (setq web-mode-enable-current-column-highlight t)   
    (setq web-mode-script-padding 2)
    (setq web-mode-style-padding 2)
    (setq web-mode-comment-style 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-markup-indent-offset 2)
    (setq css-indent-level 2)
    (setq css-indent-offset 2))
#+end_src
** C/C++
#+begin_src emacs-lisp
  (use-package cc-mode
    :ensure nil
    :defer t
    :config
    (setq c-basic-offset 4
          c-backspace-function #'delete-backward-char)

    ;; TODO: Refine this style
    (c-add-style
     "scary" '((c-comment-only-line-offset . 0)
               (c-hanging-braces-alist (brace-list-open)
                                       (brace-entry-open)
                                       (substatement-open after)
                                       (block-close . c-snug-do-while)
                                       (namespace-open after)
                                       (extern-lang-open after))
               (c-cleanup-list brace-else-brace
                               brace-catch-brace)
               (c-offsets-alist
                (knr-argdecl-intro . 0)
                (defun-close . 0)
                (defun-open . 0)
                (innamespace . 0)
                (substatement-open . 0)
                (substatement-label . 0)
                (statement-cont . +)
                (case-label . +)
                (brace-list-entry . 0)
                (brace-list-intro . +)
                (brace-list-close . 0)
                (arglist-intro . +)
                (arglist-close . 0)
                (inline-open . 0)
                (inlambda . 0)
                (access-label . -)
                (inclass . +)
                (label . 0))))

    (when (listp c-default-style)
      (setf (alist-get 'other c-default-style) "scary")))
#+end_src

* Hydras
#+begin_src emacs-lisp
  (use-package hydra
    :defer 0.1)

  (use-package windsize
    :defer 0.1)

  (defhydra sd-hydra-window (:hint nil)
    "
  Movement    ^Resize^     ^Split^          ^Other^
  ------------------------------------------------------------------
  _h_ left      _C-h_ left   _o_ horizontal   _d_   delete window
  _j_ down      _C-j_ down   _v_ vertical     _f_   only this window
  _k_ up        _C-k_ up     _m_ maximize     _M-o_ ace-window
  _l_ right     _C-l_ right  _b_ balance      _s_   switch buffers
  _q_ quit
  "
    ;; Movement
    ("h" windmove-left)
    ("j" windmove-down)
    ("k" windmove-up)
    ("l" windmove-right)

    ;; Resize
    ("C-h" windsize-left)
    ("C-j" windsize-down)
    ("C-k" windsize-up)
    ("C-l" windsize-right)

    ;; Split
    ("o" split-window-below)
    ("v" split-window-right)
    ("m" maximize-window :color blue)
    ("b" balance-windows)

    ;; Other
    ("d" delete-window)
    ("f" delete-other-windows :color blue)
    ("M-o" ace-window :color blue)
    ("s" consult-buffer)
    ("q" nil))

  (global-set-key (kbd "M-o") #'sd-hydra-window/body)

#+end_src
